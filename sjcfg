#!/usr/bin/env python3

# This is Simple JSON Config, or sjcfg
#
# It provides an easy interface to reading/writing JSON values from a file
# using dot delimited fields.
#
# Write:
#
# sjcfg my.key value
# sjcfg my '{"key": "value"}'
#
# Result from either command, in sjcfg.json:
# ```
# {
#     "my": {
#         "key": "value"
#     }
# }
# ```
#
# Read:
# 
# sjcfg my.key
# Result: value
#
# sjcfg my
# Result: {'key': 'value'}
#
# Value can be plain text, or JSON. Plain text numbers are converted to numbers.
#
# The file used is in order of precedence:
#
# * The `-f` value as in `sjcfg -f file.json my.key` or `sjcfg -f file.json my.key value`
# * The contents of the $SJCFG_FILE environment variable
# * $HOME/.config/sjcfg.json , if $SJCFG_FILE is not defined.
# * Program failure if $HOME is not defined.

import json
import os
import sys


def cfg_filename(fname):
    if fname is not None:
        return fname

    fname = os.environ.get('SJCFG_FILE')
    if fname is None:
        try:
            fname = os.environ.get('HOME') + "/.config/sjcfg.json"
        except KeyError:
            print("No valid file location found. Try using `-f file.json` on the command line,")
            print("setting the SJCFG_FILE environment variable to a file location,")
            print("or setting HOME environment to a valid path.")
            exit(1)
    return fname


def data_read(fname):
    try:
        with open(cfg_filename(fname), "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def data_write(fname, data):
    with open(cfg_filename(fname), "w") as f:
        json.dump(data, f, indent=4)


def config_read(fname, key):
    d = data_read(fname)
    for k in key.split("."):
        d = d[k]
    print(d)


def config_write(fname, key, value):
    data = data_read(fname)
    d = data
    for k in key.split("."):
        try:
            dlast = d
            d = d[k]
        except KeyError:
            dlast = d
            d[k] = {}
            d = d[k]

    try:
        dlast[k] = json.loads(value)
    except json.decoder.JSONDecodeError:
        try:
            dlast[k] = float(value)
        except ValueError:
            dlast[k] = value

    data_write(fname, data)


def usage_print():
    print("sjcfg [-f filename] dot.delimited.key       # read")
    print("sjcfg [-f filename] dot.delimited.key value # write")
    exit()


def main():
    if len(sys.argv) == 1:
        usage_print()
    else:
        fname = None
        if sys.argv[1] == "-f":
            try:
                fname = sys.argv[2]
                args = sys.argv[3:]
            except:
                usage_print()
        else:
            args = sys.argv[1:]

        if len(args) == 2:
            config_write(fname, args[0], args[1])
        elif len(args) == 1:
            config_read(fname, args[0])
        else:
            usage_print()


if __name__== "__main__":
    main()
